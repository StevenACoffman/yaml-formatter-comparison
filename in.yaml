country list:
- &flag Apple
- US
- GB
- NO
- *flag # Apple reference
favorite_prog_rock_band: Yes
homedir_location:
homedir_permissions: 0444
start_date: 2013-05-10
end_date: 20_13_05_10
ssl_expire_date: 2014-09-7 #TODAY!
really long string:  "
  what
  if
  seinfeld
  still
  on
  TV
  today"

alias1: &alias1
  foo: foo1
  bar: bar1

anchor1:
  <<: *alias1

# Inline array
inline_array: [milk, pumpkin pie, eggs, juice]

# Inline map
inline_map: {name: John Smith, age: 33}

# Datatype test
a: 123                      # an integer
b: "123"                    # a string, disambiguated by quotes
c: 123.0                    # a float
d: !!float 123.0            # also a float via explicit data type prefixed by (!!)
e: !!str 123                # a string, disambiguated by explicit type
f: !!str Yes               # a string via explicit type
g: Yes                     # a boolean True (yaml1.1), string "Yes" (yaml1.2)
h: Yes we have No bananas  # a string, "Yes" and "No" disambiguated by context.

# Multiline strings
ml1: >
    very "long"
    'string' with
    
    paragraph gap, \n and        
    spaces.

ml2: | 
    very "long"
    'string' with
  
    paragraph gap, \n and        
    spaces.

ml3: very "long"
    'string' with
  
    paragraph gap, \n and        
    spaces.

ml4: "very \"long\"
    'string' with
  
    paragraph gap, \n and        
    s\
    p\
    a\
    c\
    e\
    s."

ml5: 'very "long"
    ''string'' with
  
    paragraph gap, \n and        
    spaces.'

ml6: >- 
    very "long"
    'string' with
  
    paragraph gap, \n and        
    spaces.
  
ml7: [
    "very \"long\" 'string' with\nparagraph gap, \\n and         spaces.\n", 
    "very \"long\"\n'string' with\n\nparagraph gap, \\n and        \nspaces.\n", 
    "very \"long\" 'string' with\nparagraph gap, \\n and spaces.", 
    "very \"long\" 'string' with\nparagraph gap, \n and spaces.", 
    "very \"long\" 'string' with\nparagraph gap, \\n and spaces.", 
    "very \"long\" 'string' with\nparagraph gap, \\n and         spaces."
  ]
